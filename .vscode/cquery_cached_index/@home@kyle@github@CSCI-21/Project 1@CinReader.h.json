16
{"last_modification_time":1550262465,"language":2,"import_file":"/home/kyle/github/CSCI-21/Project 1/CinReader.cpp","args_hash":6821521783181884278,"includes":[{"line":34,"resolved_path":"/usr/include/c++/7/iostream"},{"line":35,"resolved_path":"/usr/include/c++/7/string"},{"line":36,"resolved_path":"/usr/include/c++/7/algorithm"},{"line":37,"resolved_path":"/usr/include/c++/7/climits"},{"line":38,"resolved_path":"/usr/include/c++/7/sstream"}],"dependencies":["/home/kyle/github/CSCI-21/Project 1/CinReader.cpp","/usr/include/c++/7/iostream","/usr/include/x86_64-linux-gnu/c++/7/bits/c++config.h","/usr/include/x86_64-linux-gnu/c++/7/bits/os_defines.h","/usr/include/features.h","/usr/include/x86_64-linux-gnu/sys/cdefs.h","/usr/include/x86_64-linux-gnu/gnu/stubs.h","/usr/include/c++/7/ostream","/usr/include/c++/7/ios","/usr/include/c++/7/iosfwd","/usr/include/c++/7/bits/stringfwd.h","/usr/include/c++/7/bits/memoryfwd.h","/usr/include/c++/7/bits/postypes.h","/usr/include/c++/7/cwchar","/usr/include/wchar.h","/usr/include/x86_64-linux-gnu/bits/libc-header-start.h","/usr/include/x86_64-linux-gnu/bits/floatn.h","/usr/include/x86_64-linux-gnu/bits/floatn-common.h","/usr/include/x86_64-linux-gnu/bits/types/mbstate_t.h","/usr/include/x86_64-linux-gnu/bits/types/locale_t.h","/usr/include/c++/7/exception","/usr/include/c++/7/bits/exception.h","/usr/include/c++/7/bits/exception_ptr.h","/usr/include/c++/7/bits/cxxabi_init_exception.h","/usr/include/c++/7/typeinfo","/usr/include/c++/7/bits/hash_bytes.h","/usr/include/c++/7/new","/usr/include/c++/7/bits/nested_exception.h","/usr/include/c++/7/bits/move.h","/usr/include/c++/7/bits/concept_check.h","/usr/include/c++/7/type_traits","/usr/include/c++/7/bits/char_traits.h","/usr/include/c++/7/bits/stl_algobase.h","/usr/include/c++/7/bits/functexcept.h","/usr/include/c++/7/bits/cpp_type_traits.h","/usr/include/c++/7/ext/type_traits.h","/usr/include/c++/7/ext/numeric_traits.h","/usr/include/c++/7/bits/stl_pair.h","/usr/include/c++/7/bits/stl_iterator_base_types.h","/usr/include/c++/7/bits/stl_iterator_base_funcs.h","/usr/include/c++/7/bits/stl_iterator.h","/usr/include/c++/7/bits/ptr_traits.h","/usr/include/c++/7/debug/debug.h","/usr/include/c++/7/cstdint","/usr/lib/gcc/x86_64-linux-gnu/7/include/stdint.h","/usr/include/stdint.h","/usr/include/x86_64-linux-gnu/bits/types.h","/usr/include/x86_64-linux-gnu/bits/stdint-intn.h","/usr/include/x86_64-linux-gnu/bits/stdint-uintn.h","/usr/include/c++/7/bits/localefwd.h","/usr/include/x86_64-linux-gnu/c++/7/bits/c++locale.h","/usr/include/c++/7/clocale","/usr/include/locale.h","/usr/include/c++/7/cctype","/usr/include/ctype.h","/usr/include/endian.h","/usr/include/x86_64-linux-gnu/bits/byteswap.h","/usr/include/x86_64-linux-gnu/bits/uintn-identity.h","/usr/include/c++/7/bits/ios_base.h","/usr/include/c++/7/ext/atomicity.h","/usr/include/x86_64-linux-gnu/c++/7/bits/gthr.h","/usr/include/x86_64-linux-gnu/c++/7/bits/gthr-default.h","/usr/include/pthread.h","/usr/include/sched.h","/usr/include/x86_64-linux-gnu/bits/types/time_t.h","/usr/include/x86_64-linux-gnu/bits/types/struct_timespec.h","/usr/include/time.h","/usr/include/x86_64-linux-gnu/bits/time.h","/usr/include/x86_64-linux-gnu/bits/timex.h","/usr/include/x86_64-linux-gnu/bits/types/struct_timeval.h","/usr/include/x86_64-linux-gnu/bits/types/clock_t.h","/usr/include/x86_64-linux-gnu/bits/types/struct_tm.h","/usr/include/x86_64-linux-gnu/bits/types/clockid_t.h","/usr/include/x86_64-linux-gnu/bits/types/timer_t.h","/usr/include/x86_64-linux-gnu/bits/types/struct_itimerspec.h","/usr/include/x86_64-linux-gnu/bits/pthreadtypes.h","/usr/include/x86_64-linux-gnu/bits/thread-shared-types.h","/usr/include/x86_64-linux-gnu/bits/pthreadtypes-arch.h","/usr/include/x86_64-linux-gnu/bits/setjmp.h","/usr/include/c++/7/bits/locale_classes.h","/usr/include/c++/7/string","/usr/include/c++/7/bits/allocator.h","/usr/include/x86_64-linux-gnu/c++/7/bits/c++allocator.h","/usr/include/c++/7/ext/new_allocator.h","/usr/include/c++/7/bits/ostream_insert.h","/usr/include/c++/7/bits/stl_function.h","/usr/include/c++/7/bits/range_access.h","/usr/include/c++/7/initializer_list","/usr/include/c++/7/bits/basic_string.h","/usr/include/c++/7/ext/alloc_traits.h","/usr/include/c++/7/bits/alloc_traits.h","/usr/include/c++/7/ext/string_conversions.h","/usr/include/c++/7/cstdlib","/usr/include/stdlib.h","/usr/include/x86_64-linux-gnu/sys/types.h","/usr/include/x86_64-linux-gnu/sys/select.h","/usr/include/x86_64-linux-gnu/bits/select.h","/usr/include/x86_64-linux-gnu/bits/types/sigset_t.h","/usr/include/x86_64-linux-gnu/sys/sysmacros.h","/usr/include/alloca.h","/usr/include/c++/7/bits/std_abs.h","/usr/include/c++/7/cstdio","/usr/include/stdio.h","/usr/include/x86_64-linux-gnu/bits/libio.h","/usr/include/x86_64-linux-gnu/bits/_G_config.h","/usr/include/c++/7/cerrno","/usr/include/errno.h","/usr/include/x86_64-linux-gnu/bits/errno.h","/usr/include/linux/errno.h","/usr/include/x86_64-linux-gnu/asm/errno.h","/usr/include/asm-generic/errno.h","/usr/include/c++/7/bits/functional_hash.h","/usr/include/c++/7/bits/basic_string.tcc","/usr/include/c++/7/system_error","/usr/include/x86_64-linux-gnu/c++/7/bits/error_constants.h","/usr/include/c++/7/stdexcept","/usr/include/c++/7/streambuf","/usr/include/c++/7/bits/basic_ios.h","/usr/include/c++/7/bits/locale_facets.h","/usr/include/c++/7/cwctype","/usr/include/wctype.h","/usr/include/x86_64-linux-gnu/bits/wctype-wchar.h","/usr/include/c++/7/bits/streambuf_iterator.h","/usr/include/c++/7/bits/ostream.tcc","/usr/include/c++/7/istream","/usr/include/c++/7/bits/istream.tcc","/usr/include/c++/7/algorithm","/usr/include/c++/7/utility","/usr/include/c++/7/bits/stl_algo.h","/usr/include/c++/7/bits/algorithmfwd.h","/usr/include/c++/7/bits/stl_heap.h","/usr/include/c++/7/bits/stl_tempbuf.h","/usr/include/c++/7/bits/stl_construct.h","/usr/include/c++/7/bits/uniform_int_dist.h","/usr/include/c++/7/limits","/usr/include/c++/7/climits","/usr/lib/gcc/x86_64-linux-gnu/7/include-fixed/limits.h","/usr/lib/gcc/x86_64-linux-gnu/7/include-fixed/syslimits.h","/usr/include/limits.h","/usr/include/x86_64-linux-gnu/bits/posix1_lim.h","/usr/include/x86_64-linux-gnu/bits/local_lim.h","/usr/include/x86_64-linux-gnu/bits/xopen_lim.h","/usr/include/c++/7/sstream","/usr/lib/gcc/x86_64-linux-gnu/7/include/stddef.h","/usr/lib/gcc/x86_64-linux-gnu/7/include/stdarg.h","/usr/include/x86_64-linux-gnu/bits/types/wint_t.h","/usr/include/x86_64-linux-gnu/bits/types/__mbstate_t.h","/usr/include/x86_64-linux-gnu/bits/types/__FILE.h","/usr/include/x86_64-linux-gnu/bits/types/FILE.h","/usr/include/x86_64-linux-gnu/bits/types/__locale_t.h","/usr/include/c++/7/bits/predefined_ops.h","/usr/include/x86_64-linux-gnu/bits/sched.h","/usr/include/x86_64-linux-gnu/bits/cpu-set.h","/usr/include/x86_64-linux-gnu/c++/7/bits/atomic_word.h","/usr/include/c++/7/bits/cxxabi_forced.h","/usr/include/c++/7/backward/binders.h","/usr/include/x86_64-linux-gnu/bits/waitflags.h","/usr/include/x86_64-linux-gnu/bits/types/__sigset_t.h","/usr/include/x86_64-linux-gnu/bits/sys_errlist.h","/usr/include/c++/7/bits/locale_classes.tcc","/usr/include/c++/7/bits/streambuf.tcc","/usr/include/x86_64-linux-gnu/c++/7/bits/ctype_base.h","/usr/include/x86_64-linux-gnu/c++/7/bits/ctype_inline.h","/usr/include/c++/7/bits/locale_facets.tcc","/usr/include/c++/7/bits/basic_ios.tcc","/usr/include/c++/7/bits/stl_relops.h","/usr/include/c++/7/bits/sstream.tcc","/usr/include/stdc-predef.h","/usr/include/x86_64-linux-gnu/bits/wordsize.h","/usr/include/x86_64-linux-gnu/gnu/stubs-64.h","/usr/include/x86_64-linux-gnu/c++/7/bits/cpu_defines.h","/usr/include/x86_64-linux-gnu/bits/wchar.h","/usr/include/c++/7/bits/exception_defines.h","/usr/include/c++/7/debug/assertions.h","/usr/include/x86_64-linux-gnu/bits/typesizes.h","/usr/include/x86_64-linux-gnu/bits/locale.h","/usr/include/x86_64-linux-gnu/bits/endian.h","/usr/include/x86_64-linux-gnu/bits/byteswap-16.h","/usr/include/x86_64-linux-gnu/bits/waitstatus.h","/usr/include/x86_64-linux-gnu/bits/sysmacros.h","/usr/include/x86_64-linux-gnu/bits/stdlib-float.h","/usr/include/x86_64-linux-gnu/bits/stdio_lim.h","/usr/include/asm-generic/errno-base.h","/usr/include/linux/limits.h","/usr/include/x86_64-linux-gnu/bits/posix2_lim.h","/usr/include/x86_64-linux-gnu/bits/uio_lim.h"],"skipped_by_preprocessor":[],"types":[{"id":0,"usr":5401847601697785946,"detailed_name":"","short_name_offset":0,"short_name_size":0,"kind":0,"hover":"","comments":"","declarations":[],"bases":[],"derived":[],"types":[],"funcs":[],"vars":[],"instances":[],"uses":["41:17-41:20|-1|1|4"]},{"id":1,"usr":16814547049446803484,"detailed_name":"CinReader","short_name_offset":0,"short_name_size":9,"kind":5,"hover":"","comments":"\n  A class for handling keyboard input.  CinReader provides\n  functions for reading all of the C++ primitive data types\n  and C++ strings, and performs error checking on the input.\n  @author J Boyd Trolinger\n  @version 1.1","declarations":["69:3-69:12|-1|1|4","77:4-77:13|-1|1|4"],"spell":"50:8-50:17|-1|1|2","extent":"50:2-244:2|-1|1|0","bases":[],"derived":[],"types":[],"funcs":[0,1,2,3,4,5,6,7,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27],"vars":[0,1,2,3,4,5,6,7,8],"instances":[],"uses":["69:3-69:12|1|2|4"]},{"id":2,"usr":4160338041907786,"detailed_name":"std::__cxx11::string","short_name_offset":14,"short_name_size":6,"kind":0,"hover":"","comments":"","declarations":[],"bases":[],"derived":[],"types":[],"funcs":[],"vars":[],"instances":[2,3,4,5,6,7,8],"uses":["140:18-140:24|-1|1|4","154:3-154:9|-1|1|4","178:24-178:30|-1|1|4","185:24-185:30|-1|1|4","194:29-194:35|-1|1|4","201:23-201:29|-1|1|4","208:26-208:32|-1|1|4","215:25-215:31|-1|1|4","222:26-222:32|-1|1|4","228:3-228:9|-1|1|4","229:3-229:9|-1|1|4","230:3-230:9|-1|1|4","231:3-231:9|-1|1|4","232:3-232:9|-1|1|4","233:3-233:9|-1|1|4","234:3-234:9|-1|1|4","236:3-236:9|-1|1|4","236:23-236:29|-1|1|4","237:22-237:28|-1|1|4","237:30-237:36|-1|1|4","238:25-238:31|-1|1|4","239:29-239:35|-1|1|4","240:23-240:29|-1|1|4","241:22-241:28|-1|1|4","242:21-242:27|-1|1|4","243:27-243:33|-1|1|4","243:35-243:41|-1|1|4"]},{"id":3,"usr":3,"detailed_name":"","short_name_offset":0,"short_name_size":0,"kind":0,"hover":"","comments":"","declarations":[],"bases":[],"derived":[],"types":[],"funcs":[],"vars":[],"instances":[0,1],"uses":[]}],"funcs":[{"id":0,"usr":11080465008891611581,"detailed_name":"CinReader::CinReader()","short_name_offset":0,"short_name_size":9,"kind":9,"storage":1,"hover":"","comments":"\n Constructor.\n Initializes data members to the following values:\n <ul>\n <li>intErrors = true;</li>\n <li>charRangeErrors = true;</li>\n <li>boolMsg = \"Please enter \\\"true\\\" or \\\"false\\\": \"</li>\n <li>charMsg = \"Please enter a single character: \"</li>\n <li>charRangeMsg = \"is not valid. Re-enter: \"</li>\n <li>intMsg = \"Re-enter number: \"</li>\n <li>doubleMsg = \"Input is not a double. Re-enter: \"</li>\n <li>floatMsg = \"Input is not a float. Re-enter: \"</li>\n <li>stringMsg = \"Input cannot be blank--enter text: \"</li>\n </ul>","declarations":[{"spell":"69:3-69:12|1|2|1","param_spellings":[]}],"declaring_type":1,"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":1,"usr":7055985595912055474,"detailed_name":"CinReader::~CinReader() throw()","short_name_offset":11,"short_name_size":10,"kind":6,"storage":1,"hover":"","comments":"\n Destructor.\n CinReader performs no dynamic memory allocation.  Destructor\n is provided for thoroughness and to reinforce good OO/C++ \n programming practices.","declarations":[{"spell":"77:3-77:13|1|2|1","param_spellings":[]}],"declaring_type":1,"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":2,"usr":7118222705188642235,"detailed_name":"int CinReader::readInt(int lower = (-2147483647 - 1), int upper = 2147483647)","short_name_offset":15,"short_name_size":7,"kind":6,"storage":1,"hover":"","comments":"\n Read integer input from the keyboard.\n Used with no arguments, the function will return an integer between\n INT_MIN and INT_MAX.  Optionally the function can be called\n with caller-specified upper and lower limits. If lower>upper, valid return\n value is not guaranteed. Uses intMsg for error prompt.\n@param lower caller-specified lower limit of the input, defaults to INT_MIN\n@param upper caller-specified upper limit of the input, defaults to INT_MAX\n@return an integer between INT_MIN and INT_MAX if called with\n              no arguments, or between lower and upper  (inclusive)","declarations":[{"spell":"90:7-90:14|1|2|1","param_spellings":["90:20-90:25","90:39-90:44"]}],"declaring_type":1,"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":3,"usr":16529544125037274917,"detailed_name":"int CinReader::readInt(bool userLimit, int lower, int upper)","short_name_offset":15,"short_name_size":7,"kind":6,"storage":1,"hover":"","comments":"\n Read integer input from the keyboard.\n Provided for backward compatibility with the version 1.0 CinReader API. Calls\n readInt(lower,upper) if userLimit==true, else calls readInt().\n @param userLimit if true, limit keyboard input to caller-specified range\n @param lower caller-specified lower limit of the input\n @param upper caller-specified upper limit of the input\n @return an integer between lower and upper (inclusive)","declarations":[{"spell":"101:7-101:14|1|2|1","param_spellings":["101:21-101:30","101:36-101:41","101:47-101:52"]}],"declaring_type":1,"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":4,"usr":13428123451207013747,"detailed_name":"double CinReader::readDouble()","short_name_offset":18,"short_name_size":10,"kind":6,"storage":1,"hover":"","comments":"\n Read double input from the keyboard.\n Unlike readInt, this function does not limit the range of the\n input value. Uses doubleMsg for error prompt.\n @return a double","declarations":[{"spell":"109:10-109:20|1|2|1","param_spellings":[]}],"declaring_type":1,"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":5,"usr":5533067627058153533,"detailed_name":"float CinReader::readFloat()","short_name_offset":17,"short_name_size":9,"kind":6,"storage":1,"hover":"","comments":"\n Read float input from the keyboard.\n Unlike readInt, this function does not limit the range of the\n input value. Uses floatMsg for error prompt.\n @return a float","declarations":[{"spell":"117:9-117:18|1|2|1","param_spellings":[]}],"declaring_type":1,"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":6,"usr":6206783269963186855,"detailed_name":"bool CinReader::readBool()","short_name_offset":16,"short_name_size":8,"kind":6,"storage":1,"hover":"","comments":"\n Read input from the keyboard as a boolean value.\n Will accept \"T\", \"F\" or \"TRUE\", \"FALSE\" as input and will\n return a corresponding boolean value.  The function is NOT\n case sensitive, it will accept input as any combination of\n uppercase and lowercase characters. Uses boolMsg for error prompt.\n @return a bool","declarations":[{"spell":"127:8-127:16|1|2|1","param_spellings":[]}],"declaring_type":1,"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":7,"usr":1239946309079986929,"detailed_name":"char CinReader::readChar(std::__cxx11::string range = \"\")","short_name_offset":16,"short_name_size":8,"kind":6,"storage":1,"hover":"","comments":"\nRead char input from the keyboard.\n Used with no arguments, the function will return the char entered at \n the keyboard.  Optionally, a range of acceptable inputs can\n be specified.  The range must be written as a list of chars, such as\n \"abcdef\". Uses charMsg for error prompt. If charRangeErrors==true, and \n range.length() > 0, also uses charRangeMsg for error prompt.\n @param range the range of acceptable inputs\n @return a char that is a member of range if specified, or\n                any single char if no range is provided","declarations":[{"spell":"140:8-140:16|1|2|1","param_spellings":["140:25-140:30"]}],"declaring_type":1,"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":8,"usr":9600471510862086387,"detailed_name":"","short_name_offset":0,"short_name_size":0,"kind":0,"storage":0,"hover":"","comments":"","declarations":[],"bases":[],"derived":[],"vars":[],"uses":["140:31-140:33|1|2|292"],"callees":[]},{"id":9,"usr":8328805573115715046,"detailed_name":"","short_name_offset":0,"short_name_size":0,"kind":0,"storage":0,"hover":"","comments":"","declarations":[],"bases":[],"derived":[],"vars":[],"uses":["140:31-140:33|1|2|292"],"callees":[]},{"id":10,"usr":1019869886113286713,"detailed_name":"std::__cxx11::string CinReader::readString(bool allowEmpty = true, unsigned int limitTo = 0)","short_name_offset":32,"short_name_size":10,"kind":6,"storage":1,"hover":"","comments":"\n Read string input from the keyboard.\n Used with no arguments, the function will return the string\n entered at the keyboard, which can include an empty string.\n  Uses stringMsg for error prompt.\n @param allowEmpty if true, allow empty string as input, else\n                require at least one character of input\n @param limitTo if 0, do not limit the number of characters of\n                input; if not 0, return only \"limitTo\" number of\n                characters\n @return a string","declarations":[{"spell":"154:10-154:20|1|2|1","param_spellings":["154:27-154:37","154:59-154:66"]}],"declaring_type":1,"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":11,"usr":2071395174315876202,"detailed_name":"void CinReader::showIntErrors(bool show)","short_name_offset":16,"short_name_size":13,"kind":6,"storage":1,"hover":"","comments":"\nEnable or disable more verbose error messages for invalid integer inputs.\nDefaults to true.\n@param show \tif true, show additional ERROR output on invalid input; if false,\n\t\t\t\t\tdisplay only intMsg as error prompt.","declarations":[{"spell":"162:8-162:21|1|2|1","param_spellings":["162:28-162:32"]}],"declaring_type":1,"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":12,"usr":13910256977541722796,"detailed_name":"void CinReader::showCharRangeErrors(bool show)","short_name_offset":16,"short_name_size":19,"kind":6,"storage":1,"hover":"","comments":"\nEnable or disable more verbose error messages for invalid character inputs when \nlimiting to a caller-specified range.\nDefaults to true.\n@param show \tif true, show additional ERROR output on invalid input; if false,\n\t\t\t\t\tdisplay only charMsg as error prompt.","declarations":[{"spell":"171:8-171:27|1|2|1","param_spellings":["171:34-171:38"]}],"declaring_type":1,"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":13,"usr":466117959159278991,"detailed_name":"void CinReader::setBoolMessage(std::__cxx11::string newMessage)","short_name_offset":16,"short_name_size":14,"kind":6,"storage":1,"hover":"","comments":"\nSet the prompt string for invalid bool inputs.\nDefault boolMsg is \"Please enter \\\"true\\\" or \\\"false\\\": \"\n@param newMessage a prompt string for invalid bool inputs","declarations":[{"spell":"178:8-178:22|1|2|1","param_spellings":["178:31-178:41"]}],"declaring_type":1,"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":14,"usr":10191460425371808140,"detailed_name":"void CinReader::setCharMessage(std::__cxx11::string newMessage)","short_name_offset":16,"short_name_size":14,"kind":6,"storage":1,"hover":"","comments":"\nSet the prompt string for invalid char inputs.\nDefault charMsg is \"Please enter a single character: \"\n@param newMessage a prompt string for invalid char inputs","declarations":[{"spell":"185:8-185:22|1|2|1","param_spellings":["185:31-185:41"]}],"declaring_type":1,"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":15,"usr":12274149382281570053,"detailed_name":"void CinReader::setCharRangeMessage(std::__cxx11::string newMessage)","short_name_offset":16,"short_name_size":19,"kind":6,"storage":1,"hover":"","comments":"\nSet the prompt string for invalid char inputs when limiting to a caller-specified \nrange.\nDefault charRangeMsg is \"[CHAR] is not valid. Re-enter: \" (CHAR is the user's invalid\ninput.) \"[CHAR]\" is always appended to the beginning of the char range error prompt string.\n@param newMessage a prompt string for invalid char inputs","declarations":[{"spell":"194:8-194:27|1|2|1","param_spellings":["194:36-194:46"]}],"declaring_type":1,"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":16,"usr":2564875448067189740,"detailed_name":"void CinReader::setIntMessage(std::__cxx11::string newMessage)","short_name_offset":16,"short_name_size":13,"kind":6,"storage":1,"hover":"","comments":"\nSet the prompt string for invalid int inputs.\nDefault intMsg is \"Re-enter number: \"\n@param newMessage a prompt string for invalid int inputs","declarations":[{"spell":"201:8-201:21|1|2|1","param_spellings":["201:30-201:40"]}],"declaring_type":1,"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":17,"usr":849439574263895413,"detailed_name":"void CinReader::setDoubleMessage(std::__cxx11::string newMessage)","short_name_offset":16,"short_name_size":16,"kind":6,"storage":1,"hover":"","comments":"\nSet the prompt string for invalid double inputs.\nDefault doubleMsg is \"Input is not a double. Re-enter: \"\n@param newMessage a prompt string for invalid double inputs","declarations":[{"spell":"208:8-208:24|1|2|1","param_spellings":["208:33-208:43"]}],"declaring_type":1,"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":18,"usr":12617722968286149677,"detailed_name":"void CinReader::setFloatMessage(std::__cxx11::string newMessage)","short_name_offset":16,"short_name_size":15,"kind":6,"storage":1,"hover":"","comments":"\nSet the prompt string for invalid float inputs.\nDefault floatMsg is \"Input is not a float. Re-enter: \"\n@param newMessage a prompt string for invalid float inputs","declarations":[{"spell":"215:8-215:23|1|2|1","param_spellings":["215:32-215:42"]}],"declaring_type":1,"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":19,"usr":8880796617680390706,"detailed_name":"void CinReader::setStringMessage(std::__cxx11::string newMessage)","short_name_offset":16,"short_name_size":16,"kind":6,"storage":1,"hover":"","comments":"\nSet the prompt string for invalid string inputs.\nDefault stringMsg is \"Input cannot be blank--enter text: \"\n@param newMessage a prompt string for invalid string inputs","declarations":[{"spell":"222:8-222:24|1|2|1","param_spellings":["222:33-222:43"]}],"declaring_type":1,"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":20,"usr":18014326493768346628,"detailed_name":"std::__cxx11::string CinReader::stripCommas(std::__cxx11::string input)","short_name_offset":32,"short_name_size":11,"kind":6,"storage":1,"hover":"","comments":"","declarations":[{"spell":"236:10-236:21|1|2|1","param_spellings":["236:30-236:35"]}],"declaring_type":1,"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":21,"usr":11388514900134865554,"detailed_name":"bool CinReader::testIntInput(std::__cxx11::string, std::__cxx11::string &, int l = -1, int u = -1)","short_name_offset":16,"short_name_size":12,"kind":6,"storage":1,"hover":"","comments":"","declarations":[{"spell":"237:8-237:20|1|2|1","param_spellings":["237:28-237:28","237:37-237:37","237:43-237:44","237:53-237:54"]}],"declaring_type":1,"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":22,"usr":6323540674136403179,"detailed_name":"bool CinReader::testDoubleInput(std::__cxx11::string)","short_name_offset":16,"short_name_size":15,"kind":6,"storage":1,"hover":"","comments":"","declarations":[{"spell":"238:8-238:23|1|2|1","param_spellings":["238:31-238:31"]}],"declaring_type":1,"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":23,"usr":15092789149683457115,"detailed_name":"bool CinReader::testCharInput(char, std::__cxx11::string)","short_name_offset":16,"short_name_size":13,"kind":6,"storage":1,"hover":"","comments":"","declarations":[{"spell":"239:8-239:21|1|2|1","param_spellings":["239:27-239:27","239:35-239:35"]}],"declaring_type":1,"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":24,"usr":5424862970904286952,"detailed_name":"bool CinReader::testBoolInput(std::__cxx11::string)","short_name_offset":16,"short_name_size":13,"kind":6,"storage":1,"hover":"","comments":"","declarations":[{"spell":"240:8-240:21|1|2|1","param_spellings":["240:29-240:29"]}],"declaring_type":1,"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":25,"usr":3248530693225854498,"detailed_name":"bool CinReader::getBoolValue(std::__cxx11::string)","short_name_offset":16,"short_name_size":12,"kind":6,"storage":1,"hover":"","comments":"","declarations":[{"spell":"241:8-241:20|1|2|1","param_spellings":["241:28-241:28"]}],"declaring_type":1,"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":26,"usr":11175321328956164584,"detailed_name":"void CinReader::toUpperCase(std::__cxx11::string &)","short_name_offset":16,"short_name_size":11,"kind":6,"storage":1,"hover":"","comments":"","declarations":[{"spell":"242:8-242:19|1|2|1","param_spellings":["242:28-242:28"]}],"declaring_type":1,"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":27,"usr":16951133643926359806,"detailed_name":"bool CinReader::ignoreCaseCompare(std::__cxx11::string, std::__cxx11::string)","short_name_offset":16,"short_name_size":17,"kind":6,"storage":1,"hover":"","comments":"","declarations":[{"spell":"243:8-243:25|1|2|1","param_spellings":["243:33-243:33","243:41-243:41"]}],"declaring_type":1,"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]}],"vars":[{"id":0,"usr":13614553480169675769,"detailed_name":"bool CinReader::intErrors","short_name_offset":16,"short_name_size":9,"hover":"","comments":"","declarations":[],"spell":"226:8-226:17|1|2|2","extent":"226:3-226:17|1|2|0","type":3,"uses":[],"kind":8,"storage":0},{"id":1,"usr":16167485346007577426,"detailed_name":"bool CinReader::charRangeErrors","short_name_offset":16,"short_name_size":15,"hover":"","comments":"","declarations":[],"spell":"227:8-227:23|1|2|2","extent":"227:3-227:23|1|2|0","type":3,"uses":[],"kind":8,"storage":0},{"id":2,"usr":12977332289508886907,"detailed_name":"std::__cxx11::string CinReader::boolMsg","short_name_offset":32,"short_name_size":7,"hover":"","comments":"","declarations":[],"spell":"228:10-228:17|1|2|2","extent":"228:3-228:17|1|2|0","type":2,"uses":[],"kind":8,"storage":0},{"id":3,"usr":1866263001684088770,"detailed_name":"std::__cxx11::string CinReader::charMsg","short_name_offset":32,"short_name_size":7,"hover":"","comments":"","declarations":[],"spell":"229:10-229:17|1|2|2","extent":"229:3-229:17|1|2|0","type":2,"uses":[],"kind":8,"storage":0},{"id":4,"usr":15907827403923988038,"detailed_name":"std::__cxx11::string CinReader::charRangeMsg","short_name_offset":32,"short_name_size":12,"hover":"","comments":"","declarations":[],"spell":"230:10-230:22|1|2|2","extent":"230:3-230:22|1|2|0","type":2,"uses":[],"kind":8,"storage":0},{"id":5,"usr":1174161224418229775,"detailed_name":"std::__cxx11::string CinReader::intMsg","short_name_offset":32,"short_name_size":6,"hover":"","comments":"","declarations":[],"spell":"231:10-231:16|1|2|2","extent":"231:3-231:16|1|2|0","type":2,"uses":[],"kind":8,"storage":0},{"id":6,"usr":8218860406961112783,"detailed_name":"std::__cxx11::string CinReader::doubleMsg","short_name_offset":32,"short_name_size":9,"hover":"","comments":"","declarations":[],"spell":"232:10-232:19|1|2|2","extent":"232:3-232:19|1|2|0","type":2,"uses":[],"kind":8,"storage":0},{"id":7,"usr":14422509153974301212,"detailed_name":"std::__cxx11::string CinReader::floatMsg","short_name_offset":32,"short_name_size":8,"hover":"","comments":"","declarations":[],"spell":"233:10-233:18|1|2|2","extent":"233:3-233:18|1|2|0","type":2,"uses":[],"kind":8,"storage":0},{"id":8,"usr":9237682387101510445,"detailed_name":"std::__cxx11::string CinReader::stringMsg","short_name_offset":32,"short_name_size":9,"hover":"","comments":"","declarations":[],"spell":"234:10-234:19|1|2|2","extent":"234:3-234:19|1|2|0","type":2,"uses":[],"kind":8,"storage":0},{"id":9,"usr":9904229319831336103,"detailed_name":"","short_name_offset":0,"short_name_size":0,"hover":"","comments":"","declarations":[],"uses":["90:26-90:33|-1|1|4"],"kind":0,"storage":0},{"id":10,"usr":7338245540856054797,"detailed_name":"","short_name_offset":0,"short_name_size":0,"hover":"","comments":"","declarations":[],"uses":["90:45-90:52|-1|1|4"],"kind":0,"storage":0}]}